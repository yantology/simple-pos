basePath: /api/v1
definitions:
  auth.ForgetPasswordRequest:
    description: Password reset request model
    properties:
      activation_code:
        example: "123456"
        type: string
      email:
        example: user@example.com
        type: string
      new_password:
        example: newSecurePassword123
        type: string
      new_password_confirmation:
        example: newSecurePassword123
        type: string
    required:
    - activation_code
    - email
    - new_password
    - new_password_confirmation
    type: object
  auth.LoginRequest:
    description: Login request model
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: securePassword123
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterRequest:
    description: Registration request model
    properties:
      activation_code:
        example: "123456"
        type: string
      email:
        example: user@example.com
        type: string
      fullname:
        example: John Doe
        type: string
      password:
        example: securePassword123
        type: string
      password_confirmation:
        example: securePassword123
        type: string
    required:
    - activation_code
    - email
    - fullname
    - password
    - password_confirmation
    type: object
  auth.TokenRequest:
    description: Token request model
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  category.CategoryResponse:
    description: Category response model
    properties:
      created_at:
        example: 2025-04-20T15:04:05Z07:00
        type: string
      id:
        example: "1"
        type: string
      name:
        example: Electronics
        type: string
      updated_at:
        example: 2025-04-20T15:04:05Z07:00
        type: string
      user_id:
        example: "2"
        type: string
    type: object
  category.CreateCategoryDTO:
    description: Create category request model
    properties:
      name:
        example: Electronics
        type: string
    required:
    - name
    type: object
  category.UpdateCategoryDTO:
    description: Update category request model
    properties:
      name:
        example: Updated Electronics
        type: string
    required:
    - name
    type: object
  dto.MessageResponse:
    description: Generic message response model
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  order.CreateOrderRequest:
    description: Create order request model
    properties:
      product:
        $ref: '#/definitions/order.ProductJSON'
      total:
        example: 1299.99
        type: number
      user_id:
        example: 2
        type: integer
    required:
    - product
    - total
    - user_id
    type: object
  order.OrderResponse:
    description: Order response model
    properties:
      created_at:
        example: 2025-04-25T15:04:05Z07:00
        type: string
      id:
        example: "1"
        type: string
      product:
        $ref: '#/definitions/order.ProductJSON'
      total:
        example: 1299.99
        type: number
      updated_at:
        example: 2025-04-25T15:04:05Z07:00
        type: string
      user_id:
        example: "2"
        type: string
    type: object
  order.ProductJSON:
    additionalProperties: true
    type: object
  product.CreateProductRequest:
    description: Create product request model
    properties:
      category_id:
        example: 1
        type: integer
      is_available:
        example: true
        type: boolean
      name:
        example: Smartphone X
        type: string
      price:
        example: 599.99
        type: number
      user_id:
        example: 2
        type: integer
    required:
    - category_id
    - name
    - price
    - user_id
    type: object
  product.ProductListResponse:
    description: Product list response model
    properties:
      products:
        items:
          $ref: '#/definitions/product.ProductResponse'
        type: array
    type: object
  product.ProductResponse:
    description: Product response model
    properties:
      category_id:
        example: 1
        type: integer
      created_at:
        example: "2025-04-20 15:04:05"
        type: string
      id:
        example: 1
        type: integer
      is_available:
        example: true
        type: boolean
      name:
        example: Smartphone X
        type: string
      price:
        example: 599.99
        type: number
      updated_at:
        example: "2025-04-20 15:04:05"
        type: string
      user_id:
        example: 2
        type: integer
    type: object
  product.UpdateProductRequest:
    description: Update product request model
    properties:
      category_id:
        example: 2
        type: integer
      is_available:
        example: false
        type: boolean
      name:
        example: Updated Smartphone X
        type: string
      price:
        example: 649.99
        type: number
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a retail management system server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Retail Pro API
  version: "1.0"
paths:
  /auth/forget-password:
    post:
      consumes:
      - application/json
      description: Reset user password using activation code
      parameters:
      - description: Password reset details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ForgetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success response with message
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad request response
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "401":
          description: Unauthorized response
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Reset password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Clear user authentication cookies
      produces:
      - application/json
      responses:
        "200":
          description: Success response with message
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: User logout
      tags:
      - auth
  /auth/refresh-token:
    get:
      consumes:
      - application/json
      description: Get new access token using refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Refresh token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with activation code
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Register new user
      tags:
      - auth
  /auth/token/{type}:
    post:
      consumes:
      - application/json
      description: Request a token for registration or password reset
      parameters:
      - description: Token type (registration or forget-password)
        in: path
        name: type
        required: true
        type: string
      - description: Token request parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Request activation token
      tags:
      - auth
  /categories:
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/category.CreateCategoryDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.MessageResponse'
            - properties:
                data:
                  $ref: '#/definitions/category.CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Create category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Delete category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.MessageResponse'
            - properties:
                data:
                  $ref: '#/definitions/category.CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Get category by ID
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update an existing category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated category information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/category.UpdateCategoryDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.MessageResponse'
            - properties:
                data:
                  $ref: '#/definitions/category.CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Update category
      tags:
      - categories
  /categories/name/{name}:
    get:
      consumes:
      - application/json
      description: Get a category by its name
      parameters:
      - description: Category Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.MessageResponse'
            - properties:
                data:
                  $ref: '#/definitions/category.CategoryResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Get category by name
      tags:
      - categories
  /categories/user/{userId}:
    get:
      consumes:
      - application/json
      description: Get all categories created by a specific user
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.MessageResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/category.CategoryResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Get categories by user ID
      tags:
      - categories
  /orders:
    get:
      consumes:
      - application/json
      description: Get all orders for a specific user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.MessageResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/order.OrderResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Get orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order
      parameters:
      - description: Order details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/order.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.MessageResponse'
            - properties:
                data:
                  $ref: '#/definitions/order.OrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Create order
      tags:
      - orders
  /orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an order by its ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Delete order
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Get a specific order by its ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.MessageResponse'
            - properties:
                data:
                  $ref: '#/definitions/order.OrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Get order by ID
      tags:
      - orders
  /products:
    get:
      consumes:
      - application/json
      description: Get a list of all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.ProductListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.MessageResponse'
            - properties:
                data:
                  $ref: '#/definitions/product.ProductResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Create product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Get product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated product information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/product.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Update product
      tags:
      - products
  /products/category/{categoryID}:
    get:
      consumes:
      - application/json
      description: Get all products belonging to a specific category
      parameters:
      - description: Category ID
        in: path
        name: categoryID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.ProductListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Get products by category ID
      tags:
      - products
  /products/user/{userID}:
    get:
      consumes:
      - application/json
      description: Get all products created by a specific user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.ProductListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Get products by user ID
      tags:
      - products
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
