// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/forget-password": {
            "post": {
                "description": "Reset user password using activation code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Password reset details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes_auth.ForgetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with message",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request response",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized response",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user and return JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes_auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Clear user authentication cookies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Success response with message",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "get": {
                "description": "Get new access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user with activation code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes_auth.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/auth/token/{type}": {
            "post": {
                "description": "Request a token for registration or password reset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request activation token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token type (registration or forget-password)",
                        "name": "type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Token request parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes_auth.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "description": "Retrieves a list of all categories associated with the logged-in user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get all categories for the authenticated user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes_category.Category"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new category for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Create a new category",
                "parameters": [
                    {
                        "description": "Category details",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes_category.CreateCategory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully retrieved categories",
                        "schema": {
                            "$ref": "#/definitions/routes_category.Category"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "409": {
                        "description": "Category with this name already exists",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/categories/name/{name}": {
            "get": {
                "description": "Retrieves a specific category by its name for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get category by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved categories",
                        "schema": {
                            "$ref": "#/definitions/routes_category.Category"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "description": "Retrieves a specific category by its ID for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get category by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved categories",
                        "schema": {
                            "$ref": "#/definitions/routes_category.Category"
                        }
                    },
                    "400": {
                        "description": "Invalid category ID format (if applicable)",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing category by its ID for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Update an existing category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated category details",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes_category.UpdateCategoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes_category.Category"
                        }
                    },
                    "400": {
                        "description": "Invalid request data or ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User ID not found in context or not owner",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "409": {
                        "description": "Category with this name already exists",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a category by its ID for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Delete a category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes_category.Category"
                        }
                    },
                    "400": {
                        "description": "Invalid category ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User ID not found in context or not owner",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "description": "Retrieves a list of all orders associated with the logged-in user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get all orders for the authenticated user",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved orders",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.DataResponse-array_routes_order_Order"
                        }
                    },
                    "400": {
                        "description": "User ID is required",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new order for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order details",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes_order.CreateOrder"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/routes_order.Order"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "description": "Retrieves a specific order by its ID for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get order by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved order",
                        "schema": {
                            "$ref": "#/definitions/routes_order.Order"
                        }
                    },
                    "400": {
                        "description": "Invalid order ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User ID not found in context or not owner",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: User ID in context is not a string",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an order by its ID for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Delete an order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid order ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User ID not found in context or not owner",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Retrieves a list of all products available in the system. (No user filtering currently)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get all products",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes_product.Product"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new product associated with the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Create a new product",
                "parameters": [
                    {
                        "description": "Product details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes_product.CreateProduct"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "schema": {
                            "$ref": "#/definitions/routes_product.Product"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User ID not found in context",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/products/category/{categoryID}": {
            "get": {
                "description": "Retrieves all products belonging to a specific Category ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get products by Category ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "categoryID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes_product.Product"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Category ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing product by its ID. User must own the product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Update an existing product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated product details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes_product.UpdateProduct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "$ref": "#/definitions/routes_product.Product"
                        }
                    },
                    "400": {
                        "description": "Invalid request data or ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User ID not found in context or not owner",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a product by its ID. User must own the product.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid product ID format",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User ID not found in context or not owner",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_yantology_simple-pos_pkg_dto.MessageResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_yantology_simple-pos_pkg_dto.DataResponse-array_routes_order_Order": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routes_order.Order"
                    }
                }
            }
        },
        "github_com_yantology_simple-pos_pkg_dto.MessageResponse": {
            "description": "Generic message response model",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                }
            }
        },
        "routes_auth.ForgetPasswordRequest": {
            "description": "Password reset request model",
            "type": "object",
            "required": [
                "activation_code",
                "email",
                "new_password",
                "new_password_confirmation"
            ],
            "properties": {
                "activation_code": {
                    "type": "string",
                    "example": "123456"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "new_password": {
                    "type": "string",
                    "example": "newSecurePassword123"
                },
                "new_password_confirmation": {
                    "type": "string",
                    "example": "newSecurePassword123"
                }
            }
        },
        "routes_auth.LoginRequest": {
            "description": "Login request model",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "securePassword123"
                }
            }
        },
        "routes_auth.RegisterRequest": {
            "description": "Registration request model",
            "type": "object",
            "required": [
                "activation_code",
                "email",
                "fullname",
                "password",
                "password_confirmation"
            ],
            "properties": {
                "activation_code": {
                    "type": "string",
                    "example": "123456"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "fullname": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "securePassword123"
                },
                "password_confirmation": {
                    "type": "string",
                    "example": "securePassword123"
                }
            }
        },
        "routes_auth.TokenRequest": {
            "description": "Token request model",
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "routes_category.Category": {
            "description": "Category model",
            "type": "object",
            "required": [
                "created_at",
                "id",
                "name",
                "updated_at",
                "user_id"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-04-25T15:04:05Z07:00"
                },
                "id": {
                    "description": "Changed from string to int",
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Electronics"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-04-25T15:04:05Z07:00"
                },
                "user_id": {
                    "description": "Changed from string to int",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "routes_category.CreateCategory": {
            "description": "Create category request model",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Groceries"
                }
            }
        },
        "routes_category.UpdateCategoryRequest": {
            "description": "Update category request model",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Home Goods"
                }
            }
        },
        "routes_order.CreateOrder": {
            "type": "object",
            "properties": {
                "product": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routes_order.Product"
                    }
                },
                "total": {
                    "type": "number"
                }
            }
        },
        "routes_order.Order": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "description": "Changed from string to int",
                    "type": "integer"
                },
                "product": {
                    "description": "Reverted back to []Product",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routes_order.Product"
                    }
                },
                "total": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "Changed from string to int",
                    "type": "integer"
                }
            }
        },
        "routes_order.Product": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "id": {
                    "description": "Changed from string to int",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "total_price": {
                    "type": "integer"
                }
            }
        },
        "routes_product.CreateProduct": {
            "description": "Create product request model",
            "type": "object",
            "required": [
                "category_id",
                "name",
                "price"
            ],
            "properties": {
                "category_id": {
                    "description": "Changed from string to int",
                    "type": "integer",
                    "example": 1
                },
                "is_available": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Wireless Mouse"
                },
                "price": {
                    "type": "number",
                    "example": 250000
                }
            }
        },
        "routes_product.Product": {
            "description": "Product model",
            "type": "object",
            "properties": {
                "category_id": {
                    "description": "Changed from string to int",
                    "type": "integer",
                    "example": 1
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-04-25T15:04:05Z07:00"
                },
                "id": {
                    "description": "Changed from string to int",
                    "type": "integer",
                    "example": 1
                },
                "is_available": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Laptop Pro"
                },
                "price": {
                    "type": "number",
                    "example": 15000000
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-04-25T15:04:05Z07:00"
                },
                "user_id": {
                    "description": "Changed from string to int",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "routes_product.UpdateProduct": {
            "description": "Update product request model",
            "type": "object",
            "required": [
                "category_id",
                "name",
                "price"
            ],
            "properties": {
                "category_id": {
                    "description": "Changed from string to int",
                    "type": "integer",
                    "example": 2
                },
                "is_available": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Laptop Pro X"
                },
                "price": {
                    "type": "number",
                    "example": 16500000
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "Retail Pro API",
	Description:      "This is a retail management system server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
